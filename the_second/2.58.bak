#lang sicp
;求导程序
(define (deriv exp var)
  (cond ((number? exp) 0)
        ((varible? exp)
         (if (same-varible?  exp var) 1 0))
         ((sum? exp)
          (make-sum (deriv (addend exp) var)
                    (deriv (augend exp) var)))
         ((product? exp)
          (make-sum
           (make-product (multiplier exp)
                         (deriv (multiplicand exp) var))
           (make-product (multiplicand exp)
                         (deriv (multiplier exp) var))))
         ((exponentation? exp)
          (make-product
           (exponent exp)
           (make-product
           (make-exponentiation (base exp) (- (exponent exp) 1))
           (deriv (base exp) var))))))
(define (exponentation? exp)
  (and (pair? exp) (eq? (car exp) '**)))
(define (make-exponentiation base exponent)
  (cond ((= exponent 0) 1)
        ((= exponent 1) base)
        (else
         (list '** base exponent))))
(define (base exp)
  (cadr exp))
(define (exponent exp)
  (caddr exp))
(define (varible? exp)
  (symbol? exp))
(define (same-varible? v1 v2)
  (and (varible? v1) (varible? v2) (eq? v1 v2)))

(define (make-product a1 a2)
  (cond
    ((or (=number? a1 0) (=number? a2 0)) 0)
          ((=number? a1 1) a2)
          ((=number? a2 1) a1)
          ((and (number? a1) (number? a2)) (* a1 a2))
          (else (list a1 '* a2))))

(define (make-sum a1  a2)
  (cond ((=number? a1 0) a2)
               ((=number? a2 0) a1)
               ((and (number? a1) (number? a2)) (+ a1 a2))
               (else (list a1 '+ a2))))
  
         

(define (single-operend? m)
  (and (null? (cdr m))
       (not (null? m))))
(

  
 
(define (sum? x)
  (and (pair? x) (eq? (cadr x) '+)))
(define (addend s) (car s))
(define (augend s)
   (caddr s))
(define (product? x)
  (and (pair? x) (eq? (cadr x) '*)))
(define (multiplier x)
  (car x))
(define (multiplicand p)
   (caddr p))
(define (=number? exp num)
  (and (number? exp) (= exp num)))
(deriv '((x * y) * (x + 3)) 'x)