#lang sicp
(define (square x)
  (* x x))
(define (square_list lst)
  (cond ((null? lst) nil)
        ((not(pair? lst)) (square lst))
        (else (cons (square_list (car lst))
                    (square_list (cadr lst))))))
(define (square_list1 lst)
  (map (lambda (sub_tree)
         (if (pair? sub_tree)
             (square_list1 sub_tree)
             (square sub_tree)))
       lst))
(define square_tree
 (list  1(list 2( list 3 4) 5)))
(square_list1 square_tree)
(define x (list (list 1 2) (list 3 4)))
(cdr x)