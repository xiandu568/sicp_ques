#lang sicp
(define (adjoin-set x set)
  (if (null? set)
      (list x)
      (cond ((< x (car set))
             (cons x set))
            ((= x (car set))
             set)
            ((> x (car set))
             (cons (car set)
                   (adjoin-set x (cdr set)))))))
(define (union-set set1 set2)
  (cond ((null? set1) set2)
        ((null? set2) set1)
        ((< (car set1) (car set2))
         (cons (car set1)
               (union-set (cdr set1) set2)))
        ((> (car set1) (car set2))
         (cons (car set2)
               (union-set set1 (cdr set2))))
        ((= (car set1) (car set2))
         (cons (car set1)
               (union-set (cdr set1) (cdr set2))))))

  
(adjoin-set 5 '(1 2 3 6 7 ))
(union-set '(1 2 3 4) '(3 4 5 7))